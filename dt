#!/usr/bin/env Rscript

exit = function(status, msg, ..., help=FALSE) {
  if (!missing(msg))
    cat("Error: ", sprintf(msg, ...), "\n", sep="")
  if (help) {
    cat("\n")
    print_help(parser)
  }
  quit(save="no", status=status)
}

try_install = function(pkgs) {
  silent_require = function(x)
    suppressPackageStartupMessages(require(x, character.only=TRUE))
  lapply(pkgs, function(pkg) {
    if (!silent_require(pkg)) {
      ok = try(install.packages(pkg))
      if (inherits(ok, "try-error") || !silent_require(pkg))
        exit(1L, "Unable to install package '%s'", pkg)
    }
  })
  invisible(TRUE)
}

get_package = function(dir) {
  if (is.na(dir)) {
    fn = file.path(getwd(), c(".", "..", file.path("..", "..")), "DESCRIPTION")
  } else {
    fn = file.path(dir, "DESCRIPTION")
  }
  fn = head(Filter(file.exists, fn), 1L)
  if (!length(fn))
    exit(1L, "DESCRIPTION file not found", help=FALSE)
  dir = dirname(normalizePath(fn))
  as.package(dir)
}

try_install(c("methods", "optparse", "devtools", "roxygen2", "testthat", "covr"))

description = "
Available commands:
  build:    Build R source package
  clean:    Remove compiled dlls from src/
  check:    Checks package and variable usage
  cov:      Outputs code coverage statistics using covr
  deps:     Install required dependencies, including suggests
  document: Build documentation using roxygen2
  install:  Install R package and required dependencies
  make:     Build documentation, vignettes and install package
  revdep:   Check reverse dependencies
  test:     Run unit tests
  usage:    Check variable usage using codetools
  winbuild: Upload package to win-builder

Argument DIR must point to directory containing the DESCRIPTION file.
If not provided, DESCRIPTION file is searched in current directory and
up to two parents."
opts = list(
  make_option("--devel", action="store_true",
    default=FALSE, dest="devel",
    help="Test against devel instead of release for winbuild."),
  make_option("--quick", action="store_true",
    default=FALSE, dest="quick",
    help="Set 'quick' in devtools::install."),
  make_option("--filter", action="store", type="character",
    default=NULL, dest="filter",
    help="Filter passed to devtools::test()."),
  make_option("--expensive", action="store_true", type="character",
    default=FALSE, dest="expensive",
    help="Set the environment variable for BBmisc::isExpensiveExampleOk()"),
  make_option("--threads", action="store",
    default=0L, dest="threads", type="integer",
    help="Define how many threads to use. Defaults to 0 (autodetect).")
)

parser = OptionParser(usage="%prog [options] command [DIR]",
  option_list=opts,
  description=description,
)
args = parse_args(parser, positional_arguments=TRUE)

if (length(args$args) == 0L || length(args$args) > 2L)
  exit(1L, "Incorrect number of arguments", help=TRUE)

pkg = get_package(args$args[2L])
if (args$options$threads > 0L) {
  options(Ncpus=args$options$threads)
} else {
  options(Ncpus=parallel::detectCores())
}

if (args$options$expensive) {
  Sys.setenv(R_EXPENSIVE_EXAMPLE_OK = "TRUE")
}

switch(args$args[1L],
  make = {
    document(pkg)
    install(pkg, quick=args$options$quick,
      dependencies=c("Depends", "Imports", "LinkingTo"),
      build_vignettes = TRUE)
  },
  cov = {
    package_coverage(args$args[2L])
  },
  check = {
    install_deps(pkg, dependencies=TRUE)
    check(pkg, check_dir = ".")
  },
  usage = {
    try_install("codetools")
    load_all(pkg, export_all=FALSE)
    checkUsagePackage(pkg$package)
  },
  install = {
    install(pkg, quick=args$options$quick,
      dependencies=c("Depends", "Imports", "LinkingTo"))
  },
  test = {
    test(pkg, filter=args$options$filter)
  },
  build = {
    build(pkg)
  },
  deps = {
    install_deps(pkg, dependencies=TRUE)
  },
  document = {
    document(pkg)
  },
  clean = {
    clean_dll(pkg)
  },
  winbuild = {
    document(pkg)
    build_win(pkg,
      version=ifelse(args$options$devel, "R-devel", "R-release"))
  },
  revdep = {
    # libpath: check devtools options, otherwise take home dir path.
    # if that path does not exist, create it
    lib = file.path(path.expand("~"), ".dt", "rlib")
    lib = getOption("devtool.revdep.libpath", lib)
    if (!file.exists(lib))
      dir.create(lib, recursive = TRUE)
    # the check dir must be accessible after we leave the script, so we can look at it
    check.dir = file.path(".", "rev-dep-check")
    res = revdep_check(pkg, libpath = lib, check_dir = check.dir)
    # we probably want to have an exit code on error here
    cat(revdep_check_summary(res))
  },
  exit(1L, "Unknown command '%s'", args$args[1L], help=TRUE)
)

exit(0L)

# vim: ft=r
