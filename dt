#!/usr/bin/env Rscript

exit = function(status, msg, ..., help=FALSE) {
  if (!missing(msg))
    cat("Error: ", sprintf(msg, ...), "\n", sep = "")
  if (help) {
    cat("\n")
    print_help(parser)
  }
  quit(save = "no", status = status)
}

try_install = function(pkgs) {
  silent_require = function(x)
    suppressPackageStartupMessages(require(x, character.only=TRUE))
  lapply(pkgs, function(pkg) {
    if (!silent_require(pkg)) {
      ok = try(install.packages(pkg))
      if (inherits(ok, "try-error") || !silent_require(pkg))
        exit(1L, "Unable to install package '%s'", pkg)
    }
  })
  invisible(TRUE)
}

# FIXME bench this
# with_pmake = function(threads, expr) {
#   if (threads == 1L)
#     return(expr)
#   make = Sys.getenv("MAKE", "make")
#   if (grepl("-j[0-9]+", make))
#     return(expr)
#   make = paste0(make, " -j", threads)
#   with_envvar(c(MAKE=make), expr)
# }

get_package = function(dir) {
  if (is.na(dir)) {
    fn = file.path(getwd(), c(".", "..", "../.."), "DESCRIPTION")
  } else {
    fn = file.path(dir, "DESCRIPTION")
  }
  fn = head(Filter(file.exists, fn), 1L)
  if (!length(fn))
    exit(1L, "DESCRIPTION file not found", help=FALSE)
  pkg = as.package(dirname(normalizePath(fn)))
}

try_install(c("methods", "optparse", "devtools"))

description = "
Available commands:
  build:    Build R source package
  clean:    Remove compiled dlls from src/
  check:    Checks package and variable usage
  deps:     Install required dependencies, including suggests
  document: Build documentation using roxygen2
  install:  Install R package and required dependencies
  make:     Build documentation and install package
  revdep:   Check reverse dependencies
  test:     Run unit tests
  usage:    Check variable usage using codetools
  winbuild: Upload package to win-builder

Argument DIR must point to directory containing the DESCRIPTION file.
If not provided, DESCRIPTION file is searched in current directory and
up to two parents."
opts = list(
  make_option("--devel", action = "store_true",
    default=FALSE, dest = "devel",
    help = "Test against devel instead of release for winbuild."),
  make_option("--quick", action = "store_true",
    default=FALSE, dest = "quick",
    help = "Set 'quick' in devtools::install and 'clean' in devtools::document()."),
  make_option("--threads", action = "store",
    default=1L, dest = "threads", type="integer",
    help = "Define how many threads to use. Defaults to 1.")
)

parser = OptionParser(usage = "%prog [options] command [DIR]",
  option_list = opts,
  description = description,
)
args = parse_args(parser, positional_arguments=TRUE)

if (length(args$args) == 0L || length(args$args) > 2L)
  exit(1L, "Incorrect number of arguments", help=TRUE)

pkg = get_package(args$args[2L])

switch(args$args[1L],
  make = {
    document(pkg, clean=TRUE)
    install(pkg, quick=args$options$quick,
      dependencies=c("Depends", "Imports", "LinkingTo"))
  },
  check = {
    try_install("codetools")
    install_deps(pkg, dependencies=TRUE)
    check(pkg)
  },
  usage = {
    load_all(pkg, export_all=FALSE)
    checkUsagePackage(pkg$package)
  },
  install = {
    install(pkg, quick = args$options$quick,
      dependencies=c("Depends", "Imports", "LinkingTo"))
  },
  test = {
    test(pkg)
  },
  build = {
    build(pkg)
  },
  deps = {
    install_deps(pkg, dependencies=TRUE)
  },
  document = {
    document(pkg, clean=args$options$quick)
  },
  clean = {
    clean_dll(pkg)
  },
  winbuild = {
    document(pkg, clean=TRUE)
    build_win(pkg,
      version=ifelse(args$options$devel, "R-devel", "R-release"))
  },
  revdep = {
    lib = file.path(tempfile("R-lib"))
    dir.create(lib, recursive=TRUE)
    deps = revdep(pkg$package)
    install.packages(deps, lib=lib)
    ok = check_cran(deps, libpath=lib, threads=args$options$threads)
    failed = names(Filter(Negate(is.null), ok))
    if (length(failed))
      cat("Failed packages:", paste(failed, collapse=", "), "\n")
    else
      cat("All okay!\n")
  },
  exit(1L, "Unknown command '%s'", args$args[1L], help=TRUE)
)

exit(0L)

# vim: ft=r
